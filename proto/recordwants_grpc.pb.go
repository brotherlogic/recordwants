// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WantServiceClient is the client API for WantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WantServiceClient interface {
	GetSpending(ctx context.Context, in *SpendingRequest, opts ...grpc.CallOption) (*SpendingResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	AddWant(ctx context.Context, in *AddWantRequest, opts ...grpc.CallOption) (*AddWantResponse, error)
	GetWants(ctx context.Context, in *GetWantsRequest, opts ...grpc.CallOption) (*GetWantsResponse, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type wantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWantServiceClient(cc grpc.ClientConnInterface) WantServiceClient {
	return &wantServiceClient{cc}
}

func (c *wantServiceClient) GetSpending(ctx context.Context, in *SpendingRequest, opts ...grpc.CallOption) (*SpendingResponse, error) {
	out := new(SpendingResponse)
	err := c.cc.Invoke(ctx, "/recordwants.WantService/GetSpending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wantServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/recordwants.WantService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wantServiceClient) AddWant(ctx context.Context, in *AddWantRequest, opts ...grpc.CallOption) (*AddWantResponse, error) {
	out := new(AddWantResponse)
	err := c.cc.Invoke(ctx, "/recordwants.WantService/AddWant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wantServiceClient) GetWants(ctx context.Context, in *GetWantsRequest, opts ...grpc.CallOption) (*GetWantsResponse, error) {
	out := new(GetWantsResponse)
	err := c.cc.Invoke(ctx, "/recordwants.WantService/GetWants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wantServiceClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/recordwants.WantService/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WantServiceServer is the server API for WantService service.
// All implementations should embed UnimplementedWantServiceServer
// for forward compatibility
type WantServiceServer interface {
	GetSpending(context.Context, *SpendingRequest) (*SpendingResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	AddWant(context.Context, *AddWantRequest) (*AddWantResponse, error)
	GetWants(context.Context, *GetWantsRequest) (*GetWantsResponse, error)
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
}

// UnimplementedWantServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWantServiceServer struct {
}

func (UnimplementedWantServiceServer) GetSpending(context.Context, *SpendingRequest) (*SpendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpending not implemented")
}
func (UnimplementedWantServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWantServiceServer) AddWant(context.Context, *AddWantRequest) (*AddWantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWant not implemented")
}
func (UnimplementedWantServiceServer) GetWants(context.Context, *GetWantsRequest) (*GetWantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWants not implemented")
}
func (UnimplementedWantServiceServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

// UnsafeWantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WantServiceServer will
// result in compilation errors.
type UnsafeWantServiceServer interface {
	mustEmbedUnimplementedWantServiceServer()
}

func RegisterWantServiceServer(s grpc.ServiceRegistrar, srv WantServiceServer) {
	s.RegisterService(&_WantService_serviceDesc, srv)
}

func _WantService_GetSpending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).GetSpending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordwants.WantService/GetSpending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).GetSpending(ctx, req.(*SpendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WantService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordwants.WantService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WantService_AddWant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).AddWant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordwants.WantService/AddWant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).AddWant(ctx, req.(*AddWantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WantService_GetWants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).GetWants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordwants.WantService/GetWants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).GetWants(ctx, req.(*GetWantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WantService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WantServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordwants.WantService/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WantServiceServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordwants.WantService",
	HandlerType: (*WantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpending",
			Handler:    _WantService_GetSpending_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WantService_Update_Handler,
		},
		{
			MethodName: "AddWant",
			Handler:    _WantService_AddWant_Handler,
		},
		{
			MethodName: "GetWants",
			Handler:    _WantService_GetWants_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _WantService_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordwants.proto",
}
