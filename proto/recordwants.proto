syntax = "proto3";

package recordwants;

option go_package = "github.com/brotherlogic/recordwants/proto";

import "github.com/brotherlogic/godiscogs/godiscogs.proto";

message Config {
  repeated MasterWant wants = 1;
  int32 budget = 2;
  map<int32, RecordSpend> spends = 3;
  int64 last_spend_update = 4;
  int64 last_push = 5;
}

message RecordSpend {
  int32 cost = 1;
  int64 date_added = 2;
}

message MasterWant {
  godiscogs.Release release = 1;
  int64 date_added = 2;
  bool staged = 3;
  bool active = 4;
  bool demoted = 5;
  bool superwant = 6;

  enum Level {
    UNKNOWN = 0;
    ANYTIME = 1;
    LIST = 2;
    ALWAYS = 3;
    STAGED_TO_BE_ADDED = 4;
    NEVER = 5;
    BOUGHT = 6;
    WANT_OG = 7;
    WANT_DIGITAL = 8;
    ANYTIME_LIST = 9;
  }

  Level level = 7;
  int64 date_purchased = 8;

  bool dirty = 9;
  int64 retire_time = 10;
  Level retire_level = 11;
  string budget = 12;

  enum WantState {
    STATE_UNKNOWN = 0;
    WANTED = 1;
    UNWANTED = 2;
  }
  WantState current_state = 13;
  WantState desired_state = 14;
}

message Spend {
  int32 month = 1;
  int32 spend = 2;
}

message SpendingRequest {}

message SpendingResponse {
  repeated Spend spends = 1;
}

message UpdateRequest {
  godiscogs.Release want = 1;
  bool keep_want = 2;
  bool super = 3;
  MasterWant.Level level = 4;
  int64 retire_time = 5;
  MasterWant.Level retire_level = 6;
  string budget = 7;
  MasterWant.WantState new_state = 8;
  string reason = 9;
}

message UpdateResponse {}

message AddWantRequest {
  int32 release_id = 1;
  bool superwant = 2;
  MasterWant.Level level = 3;
  int64 retire_time = 4;
  MasterWant.Level retire_level = 5;
  string budget = 6;
}

message AddWantResponse {}

message GetWantsRequest {
  repeated int32 release_id = 1;
}

message GetWantsResponse {
  repeated MasterWant want = 1;
}

message SyncRequest{
  bool soft = 1;
}
message SyncResponse{}

service WantService {
  rpc Update(UpdateRequest) returns (UpdateResponse) {};
  rpc AddWant(AddWantRequest) returns (AddWantResponse) {};
  rpc GetWants(GetWantsRequest) returns (GetWantsResponse) {};
  rpc Sync(SyncRequest) returns (SyncResponse) {};
}